CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
PROJECT(mylibrary)

# parameters
OPTION(BUILD_STATIC "Build static libraries" ON)
OPTION(BUILD_SHARED "Build shared libraries" ON)
OPTION(BUILD_UTILS "Build utilities" ON)

# conditions
IF(NOT BUILD_STATIC AND NOT BUILD_SHARED)
  MESSAGE(FATAL_ERROR "Cannot build with both BUILD_STATIC and BUILD_SHARED disabled")
ENDIF()

# Doxygen
FIND_PACKAGE(Doxygen)
OPTION(BUILD_DOCUMENTATION "Create and install API documentation (requires Doxygen)" ${DOXYGEN_FOUND})

# build parameters
#SET(CMAKE_CXX_FLAGS "-g -Wall")
#ADD_SUBDIRECTORY(src)

# build definitions
SET(ALLTARGETS)
SET(LINKTYPES)
IF(BUILD_STATIC)
  LIST(APPEND LINKTYPES "STATIC")
ENDIF()
IF(BUILD_SHARED)
  LIST(APPEND LINKTYPES "SHARED")
ENDIF()
FOREACH(LINKTYPE ${LINKTYPES})
  ADD_LIBRARY(mylibrary_${LINKTYPE} ${LINKTYPE} src/mylibrary.c)
  SET_TARGET_PROPERTIES(mylibrary_${LINKTYPE} PROPERTIES COMPILE_DEFINITIONS "BUILD_MYLIBRARY;BUILD_MYLIBRARY_${LINKTYPE}")
  IF(MSVC AND LINKTYPE STREQUAL "STATIC")
    SET_TARGET_PROPERTIES(mylibrary_${LINKTYPE} PROPERTIES SUFFIX "_s.lib")
  ENDIF()
  #IF(MSVC AND LINKTYPE STREQUAL "STATIC")
  #  SET_TARGET_PROPERTIES(mylibrary_${LINKTYPE} PROPERTIES OUTPUT_NAME mylibrary_s)
  #ELSE()
    SET_TARGET_PROPERTIES(mylibrary_${LINKTYPE} PROPERTIES OUTPUT_NAME mylibrary)
  #ENDIF()
  IF(MINGW AND LINKTYPE STREQUAL "SHARED")
    SET_TARGET_PROPERTIES(mylibrary_${LINKTYPE} PROPERTIES LINK_FLAGS "-Wl,--output-def=libmylibrary.def")
    SET_SOURCE_FILES_PROPERTIES(libmylibrary.def PROPERTIES HEADER_FILE_ONLY TRUE)
  ENDIF()
  TARGET_INCLUDE_DIRECTORIES(mylibrary_${LINKTYPE} PRIVATE src)
  TARGET_INCLUDE_DIRECTORIES(mylibrary_${LINKTYPE} PUBLIC include)
  TARGET_LINK_LIBRARIES(mylibrary_${LINKTYPE} ${ANYZIP_LIBRARIES} ${EXPAT_LIBRARIES})
  SET(ALLTARGETS ${ALLTARGETS} mylibrary_${LINKTYPE})

  SET(EXELINKTYPE ${LINKTYPE})
ENDFOREACH()

IF(BUILD_UTILS)
  ADD_EXECUTABLE(myapplication src/myapplication.c)
  TARGET_INCLUDE_DIRECTORIES(myapplication PUBLIC include)
  TARGET_LINK_LIBRARIES(myapplication mylibrary_${EXELINKTYPE})
  IF(EXELINKTYPE STREQUAL "STATIC")
    SET_TARGET_PROPERTIES(myapplication PROPERTIES COMPILE_DEFINITIONS "STATIC")
  ENDIF()
  SET(ALLTARGETS ${ALLTARGETS} myapplication)
ENDIF()

IF(BUILD_DOCUMENTATION)
  IF(NOT DOXYGEN_FOUND)
    MESSAGE(FATAL_ERROR "Doxygen is needed to build the documentation.")
  ENDIF()
  ADD_CUSTOM_TARGET(doc ALL
    COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/doc/Doxyfile
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT "Generating API documentation with Doxygen"
    VERBATIM
  )
  INSTALL(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doc/man
    DESTINATION .
  )
  INSTALL(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doc/html
    DESTINATION share/mylibrary
  )
ENDIF()

# installation specifications
INSTALL(TARGETS ${ALLTARGETS}
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
  RUNTIME DESTINATION bin
)
INSTALL(DIRECTORY include/
  DESTINATION include 
  FILES_MATCHING PATTERN "*.h"
)
IF(MINGW AND BUILD_SHARED)
  INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/libmylibrary.def" DESTINATION lib)
ENDIF()
