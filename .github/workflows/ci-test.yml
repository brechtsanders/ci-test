name: GitHub-CI for ci-test
#name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
#jobs:
#  build:
#    # The type of runner that the job will run on
#    runs-on: ubuntu-latest
#
#    # Steps represent a sequence of tasks that will be executed as part of the job
#    steps:
#    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#    - uses: actions/checkout@v2
#    - name: Run a multi-line script
#      run: |
#        make --version
#        gcc --version
#        mkdir -p build_result
#        make install PREFIX=build_result DOXYGEN=
jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows MinGW (make)", artifact: "Windows-MinGW.tar.bz2",
            os: windows-latest,
            cc: "gcc", cxx: "g++",
            configure_method: "", build_method: "make"
          }
        - {
            name: "Ubuntu GCC (make)", artifact: "Linux.tar.bz2",
            os: ubuntu-latest,
            cc: "gcc", cxx: "g++",
            configure_method: "", build_method: "make"
          }
        - {
            name: "macOS Clang (make)", artifact: "macOS.tar.bz2",
            os: macos-latest,
            cc: "clang", cxx: "clang++",
            configure_method: "", build_method: "make"
          }
        - {
            name: "Ubuntu GCC (cmake+make)", artifact: "Linux-cmake.tar.bz2",
            os: ubuntu-latest,
            cc: "gcc", cxx: "g++",
            configure_method: "cmake", build_method: "make", cmake_generator: "Unix Makefiles"
          }
        - {
            name: "Windows MinGW (cmake+make)", artifact: "Windows-MinGW-cmake.tar.bz2",
            os: windows-latest,
            cc: "gcc", cxx: "g++",
            configure_method: "cmake", build_method: "make", cmake_generator: "MSYS Makefiles"
          }
        - {
            name: "Windows MSVC (cmake)", artifact: "Windows-MSVC-cmake.tar.xz",
            os: windows-latest,
            cc: "cl", cxx: "cl",
#            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            configure_method: "cmake", build_method: "nmake", cmake_generator: "NMake Makefiles"
          }
    steps:
    - uses: actions/checkout@v1
#    - if: matrix.config.environment_script != ''
#      name: Environment script
#      run: |
#        "${{ matrix.config.environment_script }}"
    - if: matrix.config.cc == 'cl'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: 'amd64'
    - if: matrix.config.configure_method != 'cmake'
      name: Configure
      run: |
        echo "::set-env name=MAKEDIR::."
    - if: matrix.config.configure_method == 'cmake'
      name: Configure (CMake)
      run: |
        cmake -G"${{ matrix.config.cmake_generator }}" -DCMAKE_INSTALL_PREFIX:PATH=../build_result -DBUILD_STATIC:BOOL=ON -DBUILD_SHARED:BOOL=OFF -DBUILD_UTILS:BOOL=ON -DBUILD_DOCUMENTATION:BOOL=OFF -S. -Bbuild_temp
        echo "::set-env name=MAKEDIR::build_temp"
    - if: matrix.config.build_method == 'make'
      name: Build + install (make)
      run: |
        make -C${{ env.MAKEDIR }} install PREFIX=build_result DOXYGEN= CC=${{ matrix.config.cc }}
    - if: matrix.config.build_method == 'nmake'
      name: Build + install (nmake)
      run: |
        #cmake --build ${{ env.MAKEDIR }}
        #cmake --install ${{ env.MAKEDIR }}
        pushd ${{ env.MAKEDIR }}
        nmake /NOLOGO install
        popd
    - name: Pack
      run: |
        tar cfj ./${{ matrix.config.artifact }} --strip-components=1 build_result
    - name: Upload
      uses: actions/upload-artifact@v1
      with:
        path: ./${{ matrix.config.artifact }}
        name: ${{ matrix.config.artifact }}
